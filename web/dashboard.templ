package web

templ Layout(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<!-- Favicon -->
			<link rel="icon" type="image/svg+xml" href="/favicon.svg"/>
			<link rel="alternate icon" href="/favicon.ico"/>
			<link rel="mask-icon" href="/artwork/Tinkerbell-Icon-Dark.svg" color="#000000"/>
			<!-- Add Tailwind CSS via CDN -->
			<script src="https://cdn.tailwindcss.com"></script>
			<script>
				tailwind.config = {
					darkMode: 'class',
				}
			</script>
			<!-- Add htmx -->
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<link rel="stylesheet" href="css/output.css"/>
		</head>
		<body>
			{ children... }
			@Scripts()
		</body>
	</html>
}

templ Homepage(namespaces []string, hardware []Hardware) {
	@Layout("Tinkerbell") {
		<div class="flex h-screen bg-white dark:bg-gray-600">
			@MobileMenuOverlay()
			@Sidebar(namespaces)
			@MainContent(hardware)
		</div>
	}
}

templ Sidebar(namespaces []string) {
	<!-- sidebar -->
	<div id="sidebar" class="fixed inset-y-0 left-0 z-50 w-64 bg-gray-100 dark:bg-gray-600 text-white dark:text-white dark:border transform -translate-x-full transition-transform duration-300 ease-in-out md:relative md:translate-x-0 md:flex md:flex-col">
		@Logo()
		@NamespaceSelector(namespaces)
		<hr class="h-px my-4 bg-gray-300 dark:bg-gray-600 border-0 dark:border"/>
		@Navigation()
	</div>
}

templ MobileMenuOverlay() {
	<!-- Mobile menu overlay -->
	<div id="mobileMenuOverlay" class="fixed inset-0 z-40 bg-black bg-opacity-50 hidden md:hidden"></div>
}

templ Logo() {
	<!-- Logo and Selectors -->
	<div class="flex items-center mx-3 mb-6 mt-4">
		<img 
			src="artwork/Tinkerbell-Logo-Landscape-Dark-2.png" 
			alt="Tinkerbell Logo"
			class="h-10 w-auto dark:hidden"
		/>
		<img 
			src="artwork/Tinkerbell-Logo-Landscape-Light-2.png" 
			alt="Tinkerbell Logo"
			class="h-10 w-auto hidden dark:block"
		/>
	</div>
}

templ NamespaceSelector(namespaces []string) {
	<div class="flex items-center space-x-2 px-4 mb-1">
		<span href="#" class="text-xs text-gray-700 dark:text-gray-300">
			Namespace
		</span>
	</div>
	<div class="relative inline-block text-left space-x-2 px-4 mb-1">
		<button 
			id="dropdownButton"
			class="inline-flex justify-between items-center w-full px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 dark:focus:ring-offset-gray-800 focus:ring-indigo-500 dark:focus:ring-indigo-400"
			type="button"
		>
			<span id="selectedOption">Select a Namespace</span>
			<svg class="h-5 w-5 ml-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
				<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
			</svg>
		</button>
		<div 
			id="dropdownMenu"
			class="origin-top-right absolute left-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-700 ring-1 ring-black dark:ring-gray-600 ring-opacity-5 divide-y divide-gray-100 dark:divide-gray-600 focus:outline-none hidden z-50"
			role="menu" 
			aria-orientation="vertical" 
			aria-labelledby="dropdownButton"
		>
			<div class="py-1" role="none">
				for _, namespace := range namespaces {
					<a 
						href="#"
						class="text-gray-700 dark:text-gray-300 block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-white"
						role="menuitem" 
						data-value={ namespace }
						hx-get={ "/hardware?namespace=" + namespace }
						hx-target="#hardware-content"
						hx-swap="innerHTML"
					>
						{ namespace }
					</a>
				}
			</div>
		</div>
	</div>
}

type NavItem struct {
	Name string
	Icon string
	Href string
}

type Hardware struct {
	Name        string
	Namespace   string
	Description string
	MAC         string
	IPv4Address string
	Status      string
	CreatedAt   string
}

templ Navigation() {
	<!-- Navigation links -->
	<div class="flex flex-col flex-1 overflow-y-auto">
		<nav class="flex-1 px-2 py-4">
			for _, item := range []NavItem{
				{Name: "Hardware", Icon: hardwareIcon(), Href: "#"},
				{Name: "Templates", Icon: templatesIcon(), Href: "#"},
				{Name: "Workflows", Icon: workflowsIcon(), Href: "#"},
			} {
				@NavLink(item)
			}
			@BMCDropdown()
		</nav>
	</div>
}

templ NavLink(item NavItem) {
	<a 
		href={ templ.SafeURL(item.Href) }
		class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-teal-50 dark:hover:bg-teal-900/30 hover:text-teal-700 dark:hover:text-teal-300 transition-colors duration-200 rounded-md"
	>
		@templ.Raw(item.Icon)
		{ item.Name }
	</a>
}

templ BMCDropdown() {
	<button 
		type="button"
		class="flex items-center justify-between w-full px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-teal-50 dark:hover:bg-teal-900/30 hover:text-teal-700 dark:hover:text-teal-300 transition-colors duration-200 rounded-md"
		aria-controls="dropdown-example" 
		data-collapse-toggle="dropdown-example"
	>
		<div class="flex items-center">
			@templ.Raw(bmcIcon())
			<span class="text-gray-700 dark:text-gray-300">BMC</span>
		</div>
		<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
			<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
		</svg>
	</button>
	<ul id="dropdown-example" class="hidden">
		for _, item := range []NavItem{
			{Name: "Machines", Icon: bmcIcon(), Href: "#"},
			{Name: "Jobs", Icon: jobsIcon(), Href: "#"},
			{Name: "Tasks", Icon: tasksIcon(), Href: "#"},
		} {
			<li>
				<a 
					href={ templ.SafeURL(item.Href) }
					class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 transition duration-200 rounded-lg pl-11 hover:bg-teal-50 dark:hover:bg-teal-900/30 hover:text-teal-700 dark:hover:text-teal-300"
				>
					@templ.Raw(item.Icon)
					{ item.Name }
				</a>
			</li>
		}
	</ul>
}

templ MainContent(hardware []Hardware) {
	<!-- Main content -->
	<div class="flex flex-col flex-1 overflow-y-auto">
		@Header()
		@ContentArea(hardware)
	</div>
}

templ Header() {
	<div class="flex items-center justify-between h-16 bg-white border-b border-gray-200 dark:bg-gray-600 dark:border-gray-400">
		<div class="flex items-center">
			@MobileMenuButton()
			@SearchBar()
		</div>
		@DarkModeToggle()
	</div>
}

templ MobileMenuButton() {
	<!-- Mobile menu button -->
	<button 
		id="mobileMenuButton"
		class="md:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 mr-2"
		aria-label="Open main menu"
	>
		<svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
		</svg>
	</button>
}

templ SearchBar() {
	<div class="flex items-center px-4">
		<div class="relative w-full max-w-md">
			<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
				<svg class="w-5 h-5 text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
				</svg>
			</div>
			<input
				class="w-full border rounded-md pl-10 pr-4 py-2 bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
				type="text" 
				placeholder="Global Search"
			/>
		</div>
	</div>
}

templ DarkModeToggle() {
	<!-- Dark/Light mode toggle -->
	<div class="flex items-center pr-4">
		<button 
			id="darkModeToggle"
			class="p-2 rounded-lg bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200"
			aria-label="Toggle dark mode"
		>
			<!-- Sun icon (visible in dark mode) -->
			<svg id="sunIcon" class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
				<path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
			</svg>
			<!-- Moon icon (visible in light mode) -->
			<svg id="moonIcon" class="w-5 h-5 dark:hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
				<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
			</svg>
		</button>
	</div>
}

templ ContentArea(hardware []Hardware) {
	<div class="p-6 bg-white dark:bg-gray-800">
		<!-- Header -->
		<div class="mb-6">
			<h1 class="text-3xl font-bold text-gray-900 dark:text-white">Hardware</h1>
			<p class="mt-2 text-sm text-gray-600 dark:text-gray-400">Manage and monitor your hardware infrastructure</p>
		</div>

		<!-- Actions bar -->
		<div class="mb-4 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
			<div class="flex items-center space-x-4">
				<button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:bg-indigo-500 dark:hover:bg-indigo-600">
					<svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
					</svg>
					Add Hardware
				</button>
				<button class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
					<svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
					</svg>
					Import
				</button>
			</div>
			<div class="flex items-center space-x-4">
				<div class="relative">
					<input type="text" placeholder="Search hardware..." class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:placeholder-gray-400 dark:focus:placeholder-gray-500 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
						</svg>
					</div>
				</div>
			</div>
		</div>

		<!-- Hardware Table -->
		<div id="hardware-content">
			<div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-md">
			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
					<thead class="bg-gray-50 dark:bg-gray-700">
						<tr>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
								<input type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700" />
							</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
								Name
							</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
								Namespace
							</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
								MAC Address
							</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
								IP Address
							</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
								Status
							</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
								Created At
							</th>
							<th scope="col" class="relative px-6 py-3">
								<span class="sr-only">Actions</span>
							</th>
						</tr>
					</thead>
					<tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
						for _, hw := range hardware {
						<tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
							<td class="px-6 py-4 whitespace-nowrap">
								<input type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700" />
							</td>
							<td class="px-6 py-4 whitespace-nowrap">
								<div class="flex items-center">
									<div class="flex-shrink-0 h-10 w-10">
										<div class="h-10 w-10 rounded-full bg-teal-100 dark:bg-teal-900/30 flex items-center justify-center">
											<svg class="h-6 w-6 text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
												<path stroke-linecap="round" stroke-linejoin="round" d="M5.25 14.25h13.5m-13.5 0a3 3 0 0 1-3-3m3 3a3 3 0 1 0 0 6h13.5a3 3 0 1 0 0-6m-16.5-3a3 3 0 0 1 3-3h13.5a3 3 0 0 1 3 3m-19.5 0a4.5 4.5 0 0 1 .9-2.7L5.737 5.1a3.375 3.375 0 0 1 2.7-1.35h7.126c1.062 0 2.062.5 2.7 1.35l2.587 3.45a4.5 4.5 0 0 1 .9 2.7m0 0a3 3 0 0 1-3 3m0 3h.008v.008h-.008v-.008Zm0-6h.008v.008h-.008v-.008Zm-3 6h.008v.008h-.008v-.008Zm0-6h.008v.008h-.008v-.008Z" />
											</svg>
										</div>
									</div>
									<div class="ml-4">
										<div class="text-sm font-medium text-gray-900 dark:text-white">{ hw.Name }</div>
										<div class="text-sm text-gray-500 dark:text-gray-400">{ hw.Description }</div>
									</div>
								</div>
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
								{ hw.Namespace }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
								{ hw.MAC }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
								{ hw.IPv4Address }
							</td>
							<td class="px-6 py-4 whitespace-nowrap">
								if hw.Status == "Online" {
									<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
										{ hw.Status }
									</span>
								} else if hw.Status == "Provisioning" {
									<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100">
										{ hw.Status }
									</span>
								} else {
									<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100">
										{ hw.Status }
									</span>
								}
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
								{ hw.CreatedAt }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
								<button class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300 mr-3">Edit</button>
								<button class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">Delete</button>
							</td>
						</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<!-- Table Footer / Pagination -->
		<div class="bg-white dark:bg-gray-800 px-4 py-3 flex items-center justify-between border-t border-gray-200 dark:border-gray-700 sm:px-6">
			<div class="flex-1 flex justify-between sm:hidden">
				<button class="relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
					Previous
				</button>
				<button class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
					Next
				</button>
			</div>
			<div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
				<div>
					<p class="text-sm text-gray-700 dark:text-gray-300">
						Showing
						<span class="font-medium">1</span>
						to
						<span class="font-medium">3</span>
						of
						<span class="font-medium">3</span>
						results
					</p>
				</div>
				<div>
					<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
						<button class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-600">
							<span class="sr-only">Previous</span>
							<svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
							</svg>
						</button>
						<button class="relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600">
							1
						</button>
						<button class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-600">
							<span class="sr-only">Next</span>
							<svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
							</svg>
						</button>
					</nav>
				</div>
			</div>
		</div>
		</div>
	</div>
}

templ HardwareTableContent(hardware []Hardware) {
	<div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-md">
		<div class="overflow-x-auto">
			<table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
				<thead class="bg-gray-50 dark:bg-gray-700">
					<tr>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
							<input type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700" />
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
							Name
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
							Namespace
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
							MAC Address
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
							IP Address
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
							Status
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
							Created At
						</th>
						<th scope="col" class="relative px-6 py-3">
							<span class="sr-only">Actions</span>
						</th>
					</tr>
				</thead>
				<tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
					for _, hw := range hardware {
					<tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
						<td class="px-6 py-4 whitespace-nowrap">
							<input type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 dark:border-gray-600 rounded dark:bg-gray-700" />
						</td>
						<td class="px-6 py-4 whitespace-nowrap">
							<div class="flex items-center">
								<div class="flex-shrink-0 h-10 w-10">
									<div class="h-10 w-10 rounded-full bg-teal-100 dark:bg-teal-900/30 flex items-center justify-center">
										<svg class="h-6 w-6 text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" d="M5.25 14.25h13.5m-13.5 0a3 3 0 0 1-3-3m3 3a3 3 0 1 0 0 6h13.5a3 3 0 1 0 0-6m-16.5-3a3 3 0 0 1 3-3h13.5a3 3 0 0 1 3 3m-19.5 0a4.5 4.5 0 0 1 .9-2.7L5.737 5.1a3.375 3.375 0 0 1 2.7-1.35h7.126c1.062 0 2.062.5 2.7 1.35l2.587 3.45a4.5 4.5 0 0 1 .9 2.7m0 0a3 3 0 0 1-3 3m0 3h.008v.008h-.008v-.008Zm0-6h.008v.008h-.008v-.008Zm-3 6h.008v.008h-.008v-.008Zm0-6h.008v.008h-.008v-.008Z" />
										</svg>
									</div>
								</div>
								<div class="ml-4">
									<div class="text-sm font-medium text-gray-900 dark:text-white">{ hw.Name }</div>
									<div class="text-sm text-gray-500 dark:text-gray-400">{ hw.Description }</div>
								</div>
							</div>
						</td>
						<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
							{ hw.Namespace }
						</td>
						<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
							{ hw.MAC }
						</td>
						<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
							{ hw.IPv4Address }
						</td>
						<td class="px-6 py-4 whitespace-nowrap">
							if hw.Status == "Online" {
								<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
									{ hw.Status }
								</span>
							} else if hw.Status == "Provisioning" {
								<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100">
									{ hw.Status }
								</span>
							} else {
								<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100">
									{ hw.Status }
								</span>
							}
						</td>
						<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
							{ hw.CreatedAt }
						</td>
						<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
							<button class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300 mr-3">Edit</button>
							<button class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">Delete</button>
						</td>
					</tr>
					}
				</tbody>
			</table>
		</div>
	</div>

	<!-- Table Footer / Pagination -->
	<div class="bg-white dark:bg-gray-800 px-4 py-3 flex items-center justify-between border-t border-gray-200 dark:border-gray-700 sm:px-6">
		<div class="flex-1 flex justify-between sm:hidden">
			<button class="relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
				Previous
			</button>
			<button class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
				Next
			</button>
		</div>
		<div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
			<div>
				<p class="text-sm text-gray-700 dark:text-gray-300">
					Showing
					<span class="font-medium">1</span>
					to
					<span class="font-medium">3</span>
					of
					<span class="font-medium">3</span>
					results
				</p>
			</div>
			<div>
				<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
					<button class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-600">
						<span class="sr-only">Previous</span>
						<svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
						</svg>
					</button>
					<button class="relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600">
						1
					</button>
					<button class="relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-indigo-50 dark:bg-indigo-900/50 text-sm font-medium text-indigo-600 dark:text-indigo-300">
						2
					</button>
					<button class="relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600">
						3
					</button>
					<button class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-600">
						<span class="sr-only">Next</span>
						<svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
						</svg>
					</button>
				</nav>
			</div>
		</div>
	</div>
}

templ Scripts() {
	<script>
		// JavaScript for dropdown functionality
		document.addEventListener('DOMContentLoaded', () => {
			const dropdownButton = document.getElementById('dropdownButton');
			const dropdownMenu = document.getElementById('dropdownMenu');
			const selectedOptionSpan = document.getElementById('selectedOption');

			dropdownButton.addEventListener('click', () => {
				dropdownMenu.classList.toggle('hidden');
			});

			dropdownMenu.addEventListener('click', (event) => {
				if (event.target.tagName === 'A' && event.target.dataset.value) {
					selectedOptionSpan.textContent = event.target.dataset.value;
					dropdownMenu.classList.add('hidden'); // Hide dropdown after selection
				}
			});

			// Close dropdown when clicking outside
			document.addEventListener('click', (event) => {
				if (!dropdownButton.contains(event.target) && !dropdownMenu.contains(event.target)) {
					dropdownMenu.classList.add('hidden');
				}
			});

			// BMC dropdown functionality
			const bmcDropdownButton = document.querySelector('[data-collapse-toggle="dropdown-example"]');
			const bmcDropdownMenu = document.getElementById('dropdown-example');

			if (bmcDropdownButton && bmcDropdownMenu) {
				bmcDropdownButton.addEventListener('click', () => {
					bmcDropdownMenu.classList.toggle('hidden');

					// Rotate the arrow icon
					const arrow = bmcDropdownButton.querySelector('svg:last-child');
					if (bmcDropdownMenu.classList.contains('hidden')) {
						arrow.style.transform = 'rotate(0deg)';
					} else {
						arrow.style.transform = 'rotate(180deg)';
					}
				});

				// Close BMC dropdown when clicking outside
				document.addEventListener('click', (event) => {
					if (!bmcDropdownButton.contains(event.target) && !bmcDropdownMenu.contains(event.target)) {
						bmcDropdownMenu.classList.add('hidden');
						const arrow = bmcDropdownButton.querySelector('svg:last-child');
						arrow.style.transform = 'rotate(0deg)';
					}
				});
			}

			// Dark mode toggle functionality
			const darkModeToggle = document.getElementById('darkModeToggle');
			const htmlElement = document.documentElement;

			// Check for saved theme preference or default to light mode
			const savedTheme = localStorage.getItem('theme');
			const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

			if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
				htmlElement.classList.add('dark');
			} else {
				htmlElement.classList.remove('dark');
			}

			// Toggle dark mode
			darkModeToggle.addEventListener('click', () => {
				if (htmlElement.classList.contains('dark')) {
					htmlElement.classList.remove('dark');
					localStorage.setItem('theme', 'light');
				} else {
					htmlElement.classList.add('dark');
					localStorage.setItem('theme', 'dark');
				}
			});

			// Mobile menu functionality
			const mobileMenuButton = document.getElementById('mobileMenuButton');
			const sidebar = document.getElementById('sidebar');
			const mobileMenuOverlay = document.getElementById('mobileMenuOverlay');

			function openMobileMenu() {
				sidebar.classList.remove('-translate-x-full');
				mobileMenuOverlay.classList.remove('hidden');
				document.body.style.overflow = 'hidden';
			}

			function closeMobileMenu() {
				sidebar.classList.add('-translate-x-full');
				mobileMenuOverlay.classList.add('hidden');
				document.body.style.overflow = '';
			}

			if (mobileMenuButton) {
				mobileMenuButton.addEventListener('click', openMobileMenu);
			}

			if (mobileMenuOverlay) {
				mobileMenuOverlay.addEventListener('click', closeMobileMenu);
			}

			// Close mobile menu when window is resized to desktop
			window.addEventListener('resize', () => {
				if (window.innerWidth >= 768) { // md breakpoint
					closeMobileMenu();
				}
			});
		});
	</script>
}
